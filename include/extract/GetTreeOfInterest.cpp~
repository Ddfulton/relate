#include <iostream>
#include <sys/time.h>
#include <sys/resource.h>

#include "anc.hpp"
#include "anc_builder.hpp"
#include "tree_comparer.hpp"
#include "cxxopts.hpp"
#include <ctime>


void
GetTreeOfInterest(cxxopts::Options& options){
  
  //////////////////////////////////
  //Program options
  
  bool help = false;
  if(!options.count("anc") || !options.count("snp_of_interest")){
    std::cout << "Not enough arguments supplied." << std::endl;
    std::cout << "Needed: anc, snp_of_interest." << std::endl;
    help = true;
  }
  if(options.count("help") || help){
    std::cout << options.help({""}) << std::endl;
    std::cout << "Outputs tree of interest as .newick file." << std::endl;
    exit(0);
  }  
  
  int snp_of_interest = options["snp_of_interest"].as<int>();

  std::cerr << "------------------------------------------------------" << std::endl;
  std::cerr << "Get tree at SNP " << snp_of_interest << "..." << std::endl;


  //////////////////////////////////
  //Parse Data
  int N;
  std::ifstream is_N(options["anc"].as<std::string>());
  is_N.ignore(256, ' ');
  is_N >> N;
  is_N.close();

  int i; 
  std::string line, line2, read;

  //////////////////////////////////////////// Read Tree ///////////////////////////////////

  std::ifstream is_anc(options["anc"].as<std::string>());
  if(is_anc.fail()){
    std::cerr << "Error while reading anc." << std::endl;
    exit(1);
  }

  getline(is_anc,line);
  getline(is_anc,line);

  MarginalTree mtr;

  getline(is_anc, line2);
  while(getline(is_anc,line)){
  
    i = 0;
    read.clear();
    while(line[i] != ':'){
      read += line[i];
      i++;
    }
    i++;

    if(std::stoi(read) > snp_of_interest){
      //tree is in line2
      mtr.Read(line2, N);

      for(int k = 0; k < (int) mtr.tree.nodes.size(); k++){
        mtr.tree.nodes[k].branch_length *= 28.0;
      }
      mtr.tree.WriteNewick("tree_at_" + std::to_string(mtr.pos) + ".newick");

      for(int i = 0; i < (int) mtr.tree.nodes.size(); i++){
        mtr.tree.nodes[i].branch_length = mtr.tree.nodes[i].SNP_end - mtr.tree.nodes[i].SNP_begin;
        assert(!std::isnan(mtr.tree.nodes[i].branch_length));
      }
      mtr.tree.WriteNewick("tree_at_" + std::to_string(mtr.pos) + "_lifespan.newick");
      
      for(int i = 0; i < (int) mtr.tree.nodes.size(); i++){
        mtr.tree.nodes[i].branch_length = mtr.tree.nodes[i].num_events;
        assert(!std::isnan(mtr.tree.nodes[i].branch_length));
      }
      mtr.tree.WriteNewick("tree_at_" + std::to_string(mtr.pos) + "_events.newick"); 

      break; 

    }
  
    line2 = line;
  
  }

  /////////////////////////////////////////////
  //Resource Usage

  rusage usage;
  getrusage(RUSAGE_SELF, &usage);

  std::cerr << "CPU Time spent: " << usage.ru_utime.tv_sec << "." << std::setfill('0') << std::setw(6) << usage.ru_utime.tv_usec << "s; Max Memory usage: " << usage.ru_maxrss/1000.0 << "Mb." << std::endl;
  std::cerr << "------------------------------------------------------" << std::endl << std::endl;

}

