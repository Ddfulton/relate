#include "MakeChunks.cpp"
#include "PrepareFiles.cpp"
#include "Paint.cpp"
#include "BuildTopology.cpp"
#include "FindEquivalentBranches.cpp"
#include "AssociateTrees.cpp"
#include "InferBranchLengths.cpp"
#include "CombineArgs.cpp"
#include "Finalize.cpp"

#include "cxxopts.hpp"
#include <string>

int main(int argc, char* argv[]){

  //get rid of parameters S and L
  //set defaults for hap_start and hap_end
  //get rid of parameter C

  //////////////////////////////////
  //Program options  
  cxxopts::Options options("Relate");
  options.add_options()
    ("help", "Print help")
    ("mode", "Choose which part of the algorithm to run", cxxopts::value<std::string>())
    ("S,num_haps", "Number of haplotypes", cxxopts::value<int>())
    ("L,num_SNPs", "Number of SNPs", cxxopts::value<int>())
    ("C,num_chunks", "Number of chunks", cxxopts::value<int>())
    ("seq", "Filename of file containing haplotype data", cxxopts::value<std::string>())
    ("recomb", "Filename of file containing recombination rates", cxxopts::value<std::string>())
    ("pos", "Filename of file containing position of SNP on the genome", cxxopts::value<std::string>())
    ("prep", "Filename of file containing properties of snps", cxxopts::value<std::string>())
    ("m,mutation_rate", "Mutation rate", cxxopts::value<float>())
    ("N,effectiveN", "Effective population size", cxxopts::value<float>())
    ("hap_start", "index of first haplotype to be painted", cxxopts::value<int>())
    ("hap_end", "index of last haplotype to be painted", cxxopts::value<int>())
    ("i,index", "Index of window to apply the method", cxxopts::value<int>())
    ("n,chunk_size", "Number of snps per chunk", cxxopts::value<int>())
    ("o,output", "Filename of output without file extension", cxxopts::value<std::string>());

  options.parse(argc, argv);

  std::string mode = options["mode"].as<std::string>();
  
  if(!mode.compare("MakeChunks")){
    MakeChunks(options);
  }
  if(!mode.compare("PrepareFiles")){
    PrepareFiles(options);
  }
  if(!mode.compare("Paint")){
    Paint(options);
  }
  if(!mode.compare("BuildTopology")){
    BuildTopology(options);
  }
  if(!mode.compare("FindEquivalentBranches")){
    FindEquivalentBranches(options);
  }
  if(!mode.compare("AssociateTrees")){
    AssociateTrees(options);
  }
  if(!mode.compare("InferBranchLengths")){
    GetBranchLengths(options);
  }
  if(!mode.compare("CombineArgs")){
    CombineArgs(options);
  }
  if(!mode.compare("Finalize")){
    Finalize(options);
  }
  if(!mode.compare("All")){
    PrepareFiles(options);
    Paint(options);
    BuildTopology(options);
    FindEquivalentBranches(options);
    AssociateTrees(options);
    GetBranchLengths(options);
    CombineArgs(options);
    Finalize(options);
  }

  bool help = false;
  if(!options.count("mode")){
    std::cout << "Not enough arguments supplied." << std::endl;
    std::cout << "Options for --mode are:" << std::endl;
    std::cout << "TODO" << std::endl;
    help = true;
  }
  if(options.count("help") || help){
    std::cout << options.help({""}) << std::endl;
    exit(0);
  }

  return 0;

}

